@{
    var model = Model.Model as ProcessingTools.Models.Contracts.ViewModels.IPagingViewModel;

    if (model.LastPage > 0)
    {
        const long MaximalNumberOfPagesToShow = 3;
        const long NumberOfPagesNearActive = MaximalNumberOfPagesToShow / 2;

        long leftPage = model.FirstPage;
        long rightPage = model.LastPage;

        if (model.NumberOfPages > MaximalNumberOfPagesToShow)
        {
            long l = Math.Max(model.FirstPage, model.CurrentPage - NumberOfPagesNearActive);
            leftPage = l;

            long r = Math.Min(model.LastPage, model.CurrentPage + NumberOfPagesNearActive);
            rightPage = r;

            if (l == model.FirstPage)
            {
                rightPage += NumberOfPagesNearActive - (model.CurrentPage - model.FirstPage);
            }

            if (r == model.LastPage)
            {
                leftPage -= NumberOfPagesNearActive - (model.LastPage - model.CurrentPage);
            }
        }

        <nav>
            <ul class="pagination pagination-sm">
                @if (model.CurrentPage > model.FirstPage)
                {
                    <li>@Html.ActionLink(" ", model.ActionName, new { p = model.FirstPage, n = model.NumberOfItemsPerPage }, new { id = "page-first", @class = "glyphicon glyphicon-fast-backward" })</li>
                    <li>@Html.ActionLink(" ", model.ActionName, new { p = model.PreviousPage, n = model.NumberOfItemsPerPage }, new { id = "page-prev", @class = "glyphicon glyphicon-backward" })</li>
                }

                @*@if (leftPage > model.FirstPage)
                {
                    <li class="disabled"><a>...</a></li>
                }*@

                @for (long i = leftPage; i <= rightPage; ++i)
                {
                    <li class="@((i == model.CurrentPage) ? "active" : null)">@Html.ActionLink((i + 1).ToString(), model.ActionName, new { p = i, n = model.NumberOfItemsPerPage })</li>
                }

                @*@if (rightPage < model.LastPage)
                {
                    <li class="disabled"><a>...</a></li>
                }*@

                @if (model.CurrentPage < model.LastPage)
                {
                    <li>@Html.ActionLink(" ", model.ActionName, new { p = model.NextPage, n = model.NumberOfItemsPerPage }, new { id = "page-next", @class = "glyphicon glyphicon-forward" })</li>
                    <li>@Html.ActionLink(" ", model.ActionName, new { p = model.LastPage, n = model.NumberOfItemsPerPage }, new { id = "page-last", @class = "glyphicon glyphicon-fast-forward" })</li>
                }
            </ul>
        </nav>
    }
}
<script src="~/Scripts/Shared/index-paging.js"></script>