@model ProcessingTools.Web.Documents.Areas.Articles.ViewModels.Files.DocumentViewModel

@{
    ViewBag.Title = ContentConstants.DeafultEditPageTitle;
}

@Styles.Render(BundleNames.DocumentEditStyleBundleName)

<nav class="navbar navbar-default navbar-fixed-bottom">
    <div class="container container-fluid">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            @Html.ActionLink(ContentConstants.DefaultEditActionLinkTitle, nameof(FilesController.Edit), routeValues: new { id = Model.Id }, htmlAttributes: new { @class = "navbar-brand" })
        </div>

        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav">
                <li>@Html.ActionLink(@ContentConstants.DefaultPreviewActionLinkTitle, nameof(FilesController.Preview), routeValues: new { id = Model.Id }, htmlAttributes: new { target = "_blank" })</li>
            </ul>
            <ul class="nav navbar-nav navbar-right">
                <li>@Html.ActionLink(ContentConstants.DefaultBackToListActionLinkTitle, nameof(FilesController.Index))</li>
                <li>@Html.ActionLink(ContentConstants.DefaultDownloadActionLinkTitle, nameof(FilesController.Download), new { id = Model.Id })</li>
                <li><a id="refresh-button">Refresh</a></li>
                <li><a id="save-button">Save</a></li>
            </ul>
        </div>
    </div>
</nav>

<div id="editor-container"></div>

<div class="clearfix"></div>

<aside style="display: none;">
    @Html.ActionLink(
        linkText: ContentConstants.DefaultGetActionLinkTitle,
        actionName: nameof(DocumentContentController.GetXml),
        controllerName: ControllerNames.DocumentContentControllerName,
        routeValues: new { id = Model.Id },
        htmlAttributes: new { id = "get-link" })
    @Html.ActionLink(
        linkText: ContentConstants.DefaultSaveActionLinkTitle,
        actionName: nameof(DocumentContentController.SaveXml),
        controllerName: ControllerNames.DocumentContentControllerName,
        routeValues: new { id = Model.Id },
        htmlAttributes: new { id = "save-link" })
</aside>

@section Scripts {
    @Scripts.Render(BundleNames.CryptoJSScriptBundleName)
    @Scripts.Render(BundleNames.ToastrScriptBundleName)
    @Scripts.Render(BundleNames.ApplicationScriptBundleName)
    @Scripts.Render(BundleNames.MonacoEditorScriptBundleName)
    @Scripts.Render(BundleNames.DocumentEditScriptBundleName)
    @Scripts.Render(BundleNames.KeyBindingsScriptBundleName)
    @*@Scripts.Render(BundleNames.AutoSaveScriptBundleName)*@
}