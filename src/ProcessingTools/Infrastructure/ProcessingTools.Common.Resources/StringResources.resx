<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmbiguousCommand" xml:space="preserve">
    <value>Ambiguous command</value>
  </data>
  <data name="ArticleWillNotBeDeletedBecauseItContainsDocuments" xml:space="preserve">
    <value>Article will not be deleted because it contains documents</value>
  </data>
  <data name="CanNotGenerateUniqueFileName" xml:space="preserve">
    <value>Can not generate unique file name</value>
  </data>
  <data name="CommandNotFound" xml:space="preserve">
    <value>Command not found</value>
  </data>
  <data name="ConsumeScopedServiceHostedServiceStartError" xml:space="preserve">
    <value>Consume Scoped Service Hosted Service START ERROR</value>
  </data>
  <data name="ConsumeScopedServiceHostedServiceStarting" xml:space="preserve">
    <value>Consume Scoped Service Hosted Service is starting</value>
  </data>
  <data name="ConsumeScopedServiceHostedServiceStopError" xml:space="preserve">
    <value>Consume Scoped Service Hosted Service STOP ERROR</value>
  </data>
  <data name="ConsumeScopedServiceHostedServiceStopping" xml:space="preserve">
    <value>Consume Scoped Service Hosted Service is stopping</value>
  </data>
  <data name="ConsumeScopedServiceHostedServiceWorking" xml:space="preserve">
    <value>Consume Scoped Service Hosted Service is working</value>
  </data>
  <data name="DeleteDocumentContentIsNotAcknowledged" xml:space="preserve">
    <value>Delete document content is not acknowledged</value>
  </data>
  <data name="DeleteDocumentIsNotAcknowledged" xml:space="preserve">
    <value>Delete document is not acknowledged</value>
  </data>
  <data name="DeleteOperationIsNotSuccessful" xml:space="preserve">
    <value>Delete operation is not successful</value>
  </data>
  <data name="EntityNotFound" xml:space="preserve">
    <value>Entity not found</value>
  </data>
  <data name="FileNameIsNullOrWhitespace" xml:space="preserve">
    <value>File name is null or whitespace</value>
  </data>
  <data name="InformationNotFound" xml:space="preserve">
    <value>Information not found</value>
  </data>
  <data name="InsertOperationIsNotSuccessful" xml:space="preserve">
    <value>Insert operation is not successful</value>
  </data>
  <data name="InvalidCode" xml:space="preserve">
    <value>Invalid code</value>
  </data>
  <data name="InvalidColumnMapping" xml:space="preserve">
    <value>Invalid column mapping</value>
  </data>
  <data name="InvalidCommand" xml:space="preserve">
    <value>Invalid command</value>
  </data>
  <data name="InvalidData" xml:space="preserve">
    <value>Invalid data</value>
  </data>
  <data name="InvalidDocument" xml:space="preserve">
    <value>Invalid document</value>
  </data>
  <data name="InvalidItemsPerPage" xml:space="preserve">
    <value>Invalid items per page</value>
  </data>
  <data name="InvalidModel" xml:space="preserve">
    <value>Invalid model</value>
  </data>
  <data name="InvalidPageNumber" xml:space="preserve">
    <value>Invalid page number</value>
  </data>
  <data name="InvalidSkipValue" xml:space="preserve">
    <value>Invalid skip value</value>
  </data>
  <data name="JournalWillNotBeDeletedBecauseItContainsRelatedArticles" xml:space="preserve">
    <value>Journal will not be deleted because it contains related articles</value>
  </data>
  <data name="KeyExists" xml:space="preserve">
    <value>Key already exists</value>
  </data>
  <data name="KeyNotFound" xml:space="preserve">
    <value>Key not found</value>
  </data>
  <data name="MaximalLengthOfFileNameExceeded" xml:space="preserve">
    <value>Maximal length of the file name is exceeded</value>
  </data>
  <data name="MaximalNumberOfIterationsExceeded" xml:space="preserve">
    <value>Maximal number of iterations is exceeded</value>
  </data>
  <data name="NoValidCertificateConfiguration" xml:space="preserve">
    <value>No valid certificate configuration found for the current endpoint</value>
  </data>
  <data name="PossibleMatches" xml:space="preserve">
    <value>Possible matches</value>
  </data>
  <data name="PublisherWillNotBeDeletedBecauseItContainsRelatedJournals" xml:space="preserve">
    <value>Publisher will not be deleted because it contains related journals</value>
  </data>
  <data name="QueueListenerScopedProcessingServiceStarting" xml:space="preserve">
    <value>Queue Listener Scoped Processing Service is starting</value>
  </data>
  <data name="QueueListenerScopedProcessingServiceStopping" xml:space="preserve">
    <value>Queue Listener Scoped Processing Service is stopping</value>
  </data>
  <data name="QueueListenerScopedProcessingServiceWorking" xml:space="preserve">
    <value>Queue Listener Scoped Processing Service is working</value>
  </data>
  <data name="SpecifiedArticleDoesNotHaveAnyFinalDocuments" xml:space="preserve">
    <value>Specified article does not have any final documents</value>
  </data>
  <data name="SpecifiedArticleDoesNotHaveValidJournalId" xml:space="preserve">
    <value>Specified article does not have valid Journal ID</value>
  </data>
  <data name="SpecifiedJournalIsNull" xml:space="preserve">
    <value>Specified journal is null</value>
  </data>
  <data name="SpecifiedPublisherIsNull" xml:space="preserve">
    <value>Specified publisher is null</value>
  </data>
  <data name="StreamCanNotBeRead" xml:space="preserve">
    <value>Stream can not be read</value>
  </data>
  <data name="UpdateAllDocumentsAsNotFinalFailed" xml:space="preserve">
    <value>Update all documents as not final failed</value>
  </data>
  <data name="UpdateOperationIsNotSuccessful" xml:space="preserve">
    <value>Update operation is not successful</value>
  </data>
  <data name="UpdateSingleDocumentAsFinalFailed" xml:space="preserve">
    <value>Update single document as final failed</value>
  </data>
  <data name="UpsertOperationIsNotSuccessful" xml:space="preserve">
    <value>Upsert operation is not successful</value>
  </data>
  <data name="UserNotFound" xml:space="preserve">
    <value>User not found</value>
  </data>
</root>