<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# string[] getMethodNames = { "GetHtml", "GetXml" }; #>
<# string[] saveMethodNames = { "SaveHtml", "SaveXml" }; #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProcessingTools.Documents.Services.Data.Tests
{
    using System;
    using System.Linq;
    using System.Xml;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    public partial class XmlPresenterTests
    {
        <# foreach (string methodName in getMethodNames) {#>
#region <#= methodName #>Tests

        [TestMethod]
        [Timeout(1000)]
        [ExpectedException(typeof(AggregateException), AllowDerivedTypes = false)]
        public void XmlPresenter_<#= methodName #>_WithNullUserId_ShouldThrowAggregateException()
        {
            var presenter = new XmlPresenter(this.service);
            var result = presenter.<#= methodName #>(null, this.articleId, this.documentId).Result;
        }

        [TestMethod]
        [Timeout(1000)]
        public void XmlPresenter_<#= methodName #>_WithNullUserId_ShouldThrowAggregateExceptionWithArgumentNullExceptionWithCorrectParamName()
        {
            var presenter = new XmlPresenter(this.service);
            try
            {
                var result = presenter.<#= methodName #>(null, this.articleId, this.documentId).Result;
            }
            catch (AggregateException e)
            {
                Assert.AreEqual(
                    NumberOfInnerArgumentNullExceptions,
                    e.InnerExceptions.Count(ex => ex is ArgumentNullException),
                    NumberOfInnerExceptionsShouldBeMessage);

                var argumentNullException = e.InnerExceptions.First(ex => ex is ArgumentNullException) as ArgumentNullException;

                Assert.AreEqual(
                    UserIdParamName,
                    argumentNullException.ParamName,
                    this.GetParamNameShouldBeMessage(UserIdParamName));
            }
        }

        [TestMethod]
        [Timeout(1000)]
        [ExpectedException(typeof(AggregateException), AllowDerivedTypes = false)]
        public void XmlPresenter_<#= methodName #>_WithNullArticleId_ShouldThrowAggregateException()
        {
            var presenter = new XmlPresenter(this.service);
            var result = presenter.<#= methodName #>(this.userId, null, this.documentId).Result;
        }

        [TestMethod]
        [Timeout(1000)]
        public void XmlPresenter_<#= methodName #>_WithNullArticleId_ShouldThrowAggregateExceptionWithArgumentNullExceptionWithCorrectParamName()
        {
            var presenter = new XmlPresenter(this.service);
            try
            {
                var result = presenter.<#= methodName #>(this.userId, null, this.documentId).Result;
            }
            catch (AggregateException e)
            {
                Assert.AreEqual(
                    NumberOfInnerArgumentNullExceptions,
                    e.InnerExceptions.Count(ex => ex is ArgumentNullException),
                    NumberOfInnerExceptionsShouldBeMessage);

                var argumentNullException = e.InnerExceptions.First(ex => ex is ArgumentNullException) as ArgumentNullException;

                Assert.AreEqual(
                    ArticleIdParamName,
                    argumentNullException.ParamName,
                    this.GetParamNameShouldBeMessage(ArticleIdParamName));
            }
        }

        [TestMethod]
        [Timeout(1000)]
        [ExpectedException(typeof(AggregateException), AllowDerivedTypes = false)]
        public void XmlPresenter_<#= methodName #>_WithNullDocumentId_ShouldThrowAggregateException()
        {
            var presenter = new XmlPresenter(this.service);
            var result = presenter.<#= methodName #>(this.userId, this.articleId, null).Result;
        }

        [TestMethod]
        [Timeout(1000)]
        public void XmlPresenter_<#= methodName #>_WithNullDocumentId_ShouldThrowAggregateExceptionWithArgumentNullExceptionWithCorrectParamName()
        {
            var presenter = new XmlPresenter(this.service);
            try
            {
                var result = presenter.<#= methodName #>(this.userId, this.articleId, null).Result;
            }
            catch (AggregateException e)
            {
                Assert.AreEqual(
                    NumberOfInnerArgumentNullExceptions,
                    e.InnerExceptions.Count(ex => ex is ArgumentNullException),
                    NumberOfInnerExceptionsShouldBeMessage);

                var argumentNullException = e.InnerExceptions.First(ex => ex is ArgumentNullException) as ArgumentNullException;

                Assert.AreEqual(
                    DocumentIdParamName,
                    argumentNullException.ParamName,
                    this.GetParamNameShouldBeMessage(DocumentIdParamName));
            }
        }

        #endregion  <#= methodName #>Tests

        <# } #>


        <# foreach (string methodName in saveMethodNames) {#>
#region <#= methodName #>Tests

        [TestMethod]
        [Timeout(1000)]
        [ExpectedException(typeof(AggregateException), AllowDerivedTypes = false)]
        public void XmlPresenter_<#= methodName #>_WithNullUserId_ShouldThrowAggregateException()
        {
            var presenter = new XmlPresenter(this.service);
            var result = presenter.<#= methodName #>(null, this.articleId, this.document, ValidContent).Result;
        }

        [TestMethod]
        [Timeout(1000)]
        public void XmlPresenter_<#= methodName #>_WithNullUserId_ShouldThrowAggregateExceptionWithArgumentNullExceptionWithCorrectParamName()
        {
            var presenter = new XmlPresenter(this.service);
            try
            {
                var result = presenter.<#= methodName #>(null, this.articleId, this.document, ValidContent).Result;
            }
            catch (AggregateException e)
            {
                Assert.AreEqual(
                    NumberOfInnerArgumentNullExceptions,
                    e.InnerExceptions.Count(ex => ex is ArgumentNullException),
                    NumberOfInnerExceptionsShouldBeMessage);

                var argumentNullException = e.InnerExceptions.First(ex => ex is ArgumentNullException) as ArgumentNullException;

                Assert.AreEqual(
                    UserIdParamName,
                    argumentNullException.ParamName,
                    this.GetParamNameShouldBeMessage(UserIdParamName));
            }
        }

        [TestMethod]
        [Timeout(1000)]
        [ExpectedException(typeof(AggregateException), AllowDerivedTypes = false)]
        public void XmlPresenter_<#= methodName #>_WithNullArticleId_ShouldThrowAggregateException()
        {
            var presenter = new XmlPresenter(this.service);
            var result = presenter.<#= methodName #>(this.userId, null, this.document, ValidContent).Result;
        }

        [TestMethod]
        [Timeout(1000)]
        public void XmlPresenter_<#= methodName #>_WithNullArticleId_ShouldThrowAggregateExceptionWithArgumentNullExceptionWithCorrectParamName()
        {
            var presenter = new XmlPresenter(this.service);
            try
            {
                var result = presenter.<#= methodName #>(this.userId, null, this.document, ValidContent).Result;
            }
            catch (AggregateException e)
            {
                Assert.AreEqual(
                    NumberOfInnerArgumentNullExceptions,
                    e.InnerExceptions.Count(ex => ex is ArgumentNullException),
                    NumberOfInnerExceptionsShouldBeMessage);

                var argumentNullException = e.InnerExceptions.First(ex => ex is ArgumentNullException) as ArgumentNullException;

                Assert.AreEqual(
                    ArticleIdParamName,
                    argumentNullException.ParamName,
                    this.GetParamNameShouldBeMessage(ArticleIdParamName));
            }
        }

        [TestMethod]
        [Timeout(1000)]
        [ExpectedException(typeof(AggregateException), AllowDerivedTypes = false)]
        public void XmlPresenter_<#= methodName #>_WithNullDocument_ShouldThrowAggregateException()
        {
            var presenter = new XmlPresenter(this.service);
            var result = presenter.<#= methodName #>(this.userId, this.articleId, null, ValidContent).Result;
        }

        [TestMethod]
        [Timeout(1000)]
        public void XmlPresenter_<#= methodName #>_WithNullDocument_ShouldThrowAggregateExceptionWithArgumentNullExceptionWithCorrectParamName()
        {
            var presenter = new XmlPresenter(this.service);
            try
            {
                var result = presenter.<#= methodName #>(this.userId, this.articleId, null, ValidContent).Result;
            }
            catch (AggregateException e)
            {
                Assert.AreEqual(
                    NumberOfInnerArgumentNullExceptions,
                    e.InnerExceptions.Count(ex => ex is ArgumentNullException),
                    NumberOfInnerExceptionsShouldBeMessage);

                var argumentNullException = e.InnerExceptions.First(ex => ex is ArgumentNullException) as ArgumentNullException;

                Assert.AreEqual(
                    DocumentParamName,
                    argumentNullException.ParamName,
                    this.GetParamNameShouldBeMessage(DocumentParamName));
            }
        }

        [TestMethod]
        [Timeout(1000)]
        [ExpectedException(typeof(AggregateException), AllowDerivedTypes = false)]
        public void XmlPresenter_<#= methodName #>_WithNullContent_ShouldThrowAggregateException()
        {
            var presenter = new XmlPresenter(this.service);
            var result = presenter.<#= methodName #>(this.userId, this.articleId, this.document, null).Result;
        }

        [TestMethod]
        [Timeout(1000)]
        public void XmlPresenter_<#= methodName #>_WithNullContent_ShouldThrowAggregateExceptionWithArgumentNullExceptionWithCorrectParamName()
        {
            var presenter = new XmlPresenter(this.service);
            try
            {
                var result = presenter.<#= methodName #>(this.userId, this.articleId, this.document, null).Result;
            }
            catch (AggregateException e)
            {
                Assert.AreEqual(
                    NumberOfInnerArgumentNullExceptions,
                    e.InnerExceptions.Count(ex => ex is ArgumentNullException),
                    NumberOfInnerExceptionsShouldBeMessage);

                var argumentNullException = e.InnerExceptions.First(ex => ex is ArgumentNullException) as ArgumentNullException;

                Assert.AreEqual(
                    ContentParamName,
                    argumentNullException.ParamName,
                    this.GetParamNameShouldBeMessage(ContentParamName));
            }
        }

        [TestMethod]
        [Timeout(1000)]
        [ExpectedException(typeof(AggregateException), AllowDerivedTypes = false)]
        public void XmlPresenter_<#= methodName #>_WithEmptyContent_ShouldThrowAggregateException()
        {
            var presenter = new XmlPresenter(this.service);
            var result = presenter.<#= methodName #>(this.userId, this.articleId, this.document, string.Empty).Result;
        }

        [TestMethod]
        [Timeout(1000)]
        public void XmlPresenter_<#= methodName #>_WithEmptyContent_ShouldThrowAggregateExceptionWithArgumentNullExceptionWithCorrectParamName()
        {
            var presenter = new XmlPresenter(this.service);
            try
            {
                var result = presenter.<#= methodName #>(this.userId, this.articleId, this.document, string.Empty).Result;
            }
            catch (AggregateException e)
            {
                Assert.AreEqual(
                    NumberOfInnerArgumentNullExceptions,
                    e.InnerExceptions.Count(ex => ex is ArgumentNullException),
                    NumberOfInnerExceptionsShouldBeMessage);

                var argumentNullException = e.InnerExceptions.First(ex => ex is ArgumentNullException) as ArgumentNullException;

                Assert.AreEqual(
                    ContentParamName,
                    argumentNullException.ParamName,
                    this.GetParamNameShouldBeMessage(ContentParamName));
            }
        }

        [TestMethod]
        [Timeout(1000)]
        [ExpectedException(typeof(AggregateException), AllowDerivedTypes = false)]
        public void XmlPresenter_<#= methodName #>_WithWhitespaceContent_ShouldThrowAggregateException()
        {
            var presenter = new XmlPresenter(this.service);
            var result = presenter.<#= methodName #>(this.userId, this.articleId, this.document, @"  
            ").Result;
        }

        [TestMethod]
        [Timeout(1000)]
        public void XmlPresenter_<#= methodName #>_WithWhitespaceContent_ShouldThrowAggregateExceptionWithArgumentNullExceptionWithCorrectParamName()
        {
            var presenter = new XmlPresenter(this.service);
            try
            {
                var result = presenter.<#= methodName #>(this.userId, this.articleId, this.document, @"  
                ").Result;
            }
            catch (AggregateException e)
            {
                Assert.AreEqual(
                    NumberOfInnerArgumentNullExceptions,
                    e.InnerExceptions.Count(ex => ex is ArgumentNullException),
                    NumberOfInnerExceptionsShouldBeMessage);

                var argumentNullException = e.InnerExceptions.First(ex => ex is ArgumentNullException) as ArgumentNullException;

                Assert.AreEqual(
                    ContentParamName,
                    argumentNullException.ParamName,
                    this.GetParamNameShouldBeMessage(ContentParamName));
            }
        }


        [TestMethod]
        [Timeout(1000)]
        [ExpectedException(typeof(AggregateException), AllowDerivedTypes = false)]
        public void XmlPresenter_<#= methodName #>_WithInvalidXmlContent_ShouldThrowAggregateException()
        {
            var presenter = new XmlPresenter(this.service);
            var result = presenter.<#= methodName #>(this.userId, this.articleId, this.document, InvalidContent).Result;
        }

        [TestMethod]
        [Timeout(1000)]
        public void XmlPresenter_<#= methodName #>_WithInvalidXmlContent_ShouldThrowAggregateExceptionWithXmlException()
        {
            var presenter = new XmlPresenter(this.service);
            try
            {
                var result = presenter.<#= methodName #>(this.userId, this.articleId, this.document, InvalidContent).Result;
            }
            catch (AggregateException e)
            {
                Assert.AreEqual(
                    NumberOfInnerArgumentNullExceptions,
                    e.InnerExceptions.Count(ex => ex is XmlException),
                    NumberOfInnerExceptionsShouldBeMessage);
            }
        }

        #endregion  <#= methodName #>Tests

        <# } #>
    }
}

